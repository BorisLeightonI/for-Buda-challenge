# -*- coding: utf-8 -*-
"""budaChallenge_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15IsdtOG_2n8Ffka8EkiTTzwsBgHuF3Kj
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
from datetime import datetime
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import requests

url = 'https://www.buda.com/api/v2/markets/'

date_format = "%Y-%m-%d %H:%M:%S"
to_date_string = "2024-03-20 13:00:00"
from_date_string = "2024-03-20 12:00:00"

from_date_timestamp = datetime.strptime(from_date_string, date_format).timestamp()
to_date_timestamp = datetime.strptime(to_date_string, date_format).timestamp()

rows = []

def lookFromTo(to_timestamp_ms):
  response = requests.get(url+'btc-clp/trades?timestamp='+str(to_timestamp_ms))
  last_timestamp = response.json()['trades']['last_timestamp']
  entries = response.json()['trades']['entries']
  for entrie in entries:
    if(float(entrie[0])/1000<from_date_timestamp):
      print('se encontró el fin del rango')
      return
    #print(float(entrie[0])/1000,from_date_timestamp,float(entrie[0])/1000<from_date_timestamp)
    rows.append(entrie)

  lookFromTo(int(last_timestamp)-1)
  #response2 = requests.get(url+'btc-clp/trades?timestamp='+str(int(last_timestamp)-1))

response = requests.get(url+'btc-clp/trades?timestamp='+str(to_date_timestamp*1000))
print(response.json())
last_timestamp = response.json()['trades']['last_timestamp']
#entries = response.json()['entries']

lookFromTo(to_date_timestamp*1000)

df = pd.DataFrame(rows, columns=['TimeStamp', 'Amount', 'Price', 'Direction', 'Indice'])

df.head()

"""#¿Cuánto dinero (en CLP) se transó durante el evento "Black Buda" BTC-CLP ? (truncar en 2 decimales)"""

df.sum(axis=0)

df['Amount']=df['Amount'].astype('float32')
df['Price']=df['Price'].astype('float32')

sumas = df.sum(axis=0)

sumas['Price']

sumas['Amount']

"""#Comparación con el Año Anterior"""

lastYear_from_date_string = "2023-03-20 12:00:00"
lastYear_from_date_timestamp = datetime.strptime(lastYear_from_date_string, date_format).timestamp()
lastYear_to_date_string = "2023-03-20 13:00:00"
lastYear_to_date_timestamp = datetime.strptime(lastYear_to_date_string, date_format).timestamp()

def new_lookFromTo(from_timestamp_ms, to_timestamp_ms):
  response = requests.get(url+'btc-clp/trades?timestamp='+str(to_timestamp_ms))
  last_timestamp = response.json()['trades']['last_timestamp']
  entries = response.json()['trades']['entries']
  for entrie in entries:
    if(float(entrie[0])<from_timestamp_ms):
      print('se encontró el fin del rango')
      return
    new_rows.append(entrie)

  new_lookFromTo(from_timestamp_ms, int(last_timestamp)-1)

new_rows = []

new_lookFromTo(lastYear_from_date_timestamp*1000, lastYear_to_date_timestamp*1000)

df_lastYear = pd.DataFrame(new_rows, columns=['TimeStamp', 'Amount', 'Price', 'Direction', 'Indice'])

df_lastYear.head()

df_lastYear['Amount']=df_lastYear['Amount'].astype('float32')
df_lastYear['Price']=df_lastYear['Price'].astype('float32')

lastYear_sumas = df_lastYear.sum(axis=0)

lastYear_sumas['Price']

lastYear_sumas['Amount']

"""##Año actual: 0.65110415(BTC) 3556581400.0(CLP)
##Año Pasado: 18.172981(BTC) 4885537300.0(CLP)

#Aumento en volumen de transacciones
"""

(18.17-0.65)/18.17

"""#Pérdida por 0% comisión"""

3556581400.0*0.8/100